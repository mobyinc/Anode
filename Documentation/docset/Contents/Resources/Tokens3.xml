<?xml version="1.0" encoding="UTF-8"?>
<Tokens version="1.0">
	<File path="Classes/AFImageRequestOperation.html">
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/cl/AFImageRequestOperation</TokenIdentifier>
			<Abstract type="html">AFImageRequestOperation is a subclass of AFHTTPRequestOperation for downloading an processing images.</Abstract>
			<DeclaredIn>AFImageRequestOperation.h</DeclaredIn>
			
			<NodeRef refid="3"/>
		</Token>
		
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AFImageRequestOperation/setResponseImage:</TokenIdentifier>
			<Abstract type="html">An image constructed from the response data. If an error occurs during the request, nil will be returned, and the error property will be set to the error.</Abstract>
			<DeclaredIn>AFImageRequestOperation.h</DeclaredIn>			
			
			<Declaration>@property (readonly, nonatomic, strong) UIImage *responseImage</Declaration>
			
			
			<Anchor>//api/name/responseImage</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/AFImageRequestOperation/responseImage</TokenIdentifier>
			<Abstract type="html">An image constructed from the response data. If an error occurs during the request, nil will be returned, and the error property will be set to the error.</Abstract>
			<DeclaredIn>AFImageRequestOperation.h</DeclaredIn>			
			
			<Declaration>@property (readonly, nonatomic, strong) UIImage *responseImage</Declaration>
			
			
			<Anchor>//api/name/responseImage</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AFImageRequestOperation/setImageScale:</TokenIdentifier>
			<Abstract type="html">The scale factor used when interpreting the image data to construct responseImage. Specifying a scale factor of 1.0 results in an image whose size matches the pixel-based dimensions of the image. Applying a different scale factor changes the size of the image as reported by the size property. This is set to the value of scale of the main screen by default, which automatically scales images for retina displays, for instance.</Abstract>
			<DeclaredIn>AFImageRequestOperation.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, assign) CGFloat imageScale</Declaration>
			
			
			<Anchor>//api/name/imageScale</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/AFImageRequestOperation/imageScale</TokenIdentifier>
			<Abstract type="html">The scale factor used when interpreting the image data to construct responseImage. Specifying a scale factor of 1.0 results in an image whose size matches the pixel-based dimensions of the image. Applying a different scale factor changes the size of the image as reported by the size property. This is set to the value of scale of the main screen by default, which automatically scales images for retina displays, for instance.</Abstract>
			<DeclaredIn>AFImageRequestOperation.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, assign) CGFloat imageScale</Declaration>
			
			
			<Anchor>//api/name/imageScale</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/AFImageRequestOperation/imageRequestOperationWithRequest:success:</TokenIdentifier>
			<Abstract type="html">Creates and returns an AFImageRequestOperation object and sets the specified success callback.</Abstract>
			<DeclaredIn>AFImageRequestOperation.h</DeclaredIn>			
			
			<Declaration>+ (instancetype)imageRequestOperationWithRequest:(NSURLRequest *)urlRequest success:(void ( ^ ) ( UIImage *image ))success</Declaration>
			<Parameters>
				<Parameter>
					<Name>urlRequest</Name>
					<Abstract type="html">The request object to be loaded asynchronously during execution of the operation.</Abstract>
				</Parameter><Parameter>
					<Name>success</Name>
					<Abstract type="html">A block object to be executed when the request finishes successfully. This block has no return value and takes a single arguments, the image created from the response data of the request.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">A new image request operation</Abstract></ReturnValue>
			<Anchor>//api/name/imageRequestOperationWithRequest:success:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/AFImageRequestOperation/imageRequestOperationWithRequest:imageProcessingBlock:success:failure:</TokenIdentifier>
			<Abstract type="html">Creates and returns an AFImageRequestOperation object and sets the specified success callback.</Abstract>
			<DeclaredIn>AFImageRequestOperation.h</DeclaredIn>			
			
			<Declaration>+ (instancetype)imageRequestOperationWithRequest:(NSURLRequest *)urlRequest imageProcessingBlock:(UIImage *( ^ ) ( UIImage *image ))imageProcessingBlock success:(void ( ^ ) ( NSURLRequest *request , NSHTTPURLResponse *response , UIImage *image ))success failure:(void ( ^ ) ( NSURLRequest *request , NSHTTPURLResponse *response , NSError *error ))failure</Declaration>
			<Parameters>
				<Parameter>
					<Name>urlRequest</Name>
					<Abstract type="html">The request object to be loaded asynchronously during execution of the operation.</Abstract>
				</Parameter><Parameter>
					<Name>imageProcessingBlock</Name>
					<Abstract type="html">A block object to be executed after the image request finishes successfully, but before the image is returned in the success block. This block takes a single argument, the image loaded from the response body, and returns the processed image.</Abstract>
				</Parameter><Parameter>
					<Name>success</Name>
					<Abstract type="html">A block object to be executed when the request finishes successfully, with a status code in the 2xx range, and with an acceptable content type (e.g. image/png). This block has no return value and takes three arguments: the request object of the operation, the response for the request, and the image created from the response data.</Abstract>
				</Parameter><Parameter>
					<Name>failure</Name>
					<Abstract type="html">A block object to be executed when the request finishes unsuccessfully. This block has no return value and takes three arguments: the request object of the operation, the response for the request, and the error associated with the cause for the unsuccessful operation.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">A new image request operation</Abstract></ReturnValue>
			<Anchor>//api/name/imageRequestOperationWithRequest:imageProcessingBlock:success:failure:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AFImageRequestOperation/initWithRequest:</TokenIdentifier>
			<Abstract type="html">Initializes and returns a newly allocated operation object with a url connection configured with the specified url request.</Abstract>
			<DeclaredIn>AFImageRequestOperation.m</DeclaredIn>			
			
			<Declaration>- (id)initWithRequest:(NSURLRequest *)urlRequest</Declaration>
			<Parameters>
				<Parameter>
					<Name>urlRequest</Name>
					<Abstract type="html">The request object to be used by the operation connection.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/initWithRequest:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/AFImageRequestOperation/acceptableContentTypes</TokenIdentifier>
			<Abstract type="html">Returns an NSSet object containing the acceptable MIME types. When non-nil, the operation will set the error property to an error in AFErrorDomain. See http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.17</Abstract>
			<DeclaredIn>AFImageRequestOperation.m</DeclaredIn>			
			
			<Declaration>+ (NSSet *)acceptableContentTypes</Declaration>
			
			
			<Anchor>//api/name/acceptableContentTypes</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/AFImageRequestOperation/canProcessRequest:</TokenIdentifier>
			<Abstract type="html">A Boolean value determining whether or not the class can process the specified request. For example, AFJSONRequestOperation may check to make sure the content type was application/json or the URL path extension was .json.</Abstract>
			<DeclaredIn>AFImageRequestOperation.m</DeclaredIn>			
			
			<Declaration>+ (BOOL)canProcessRequest:(NSURLRequest *)request</Declaration>
			<Parameters>
				<Parameter>
					<Name>urlRequest</Name>
					<Abstract type="html">The request that is determined to be supported or not supported for this class.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/canProcessRequest:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AFImageRequestOperation/setCompletionBlockWithSuccess:failure:</TokenIdentifier>
			<Abstract type="html">Sets the completionBlock property with a block that executes either the specified success or failure block, depending on the state of the request on completion. If error returns a value, which can be caused by an unacceptable status code or content type, then failure is executed. Otherwise, success is executed.</Abstract>
			<DeclaredIn>AFImageRequestOperation.m</DeclaredIn>			
			
			<Declaration>- (void)setCompletionBlockWithSuccess:(void ( ^ ) ( AFHTTPRequestOperation *operation , id responseObject ))success failure:(void ( ^ ) ( AFHTTPRequestOperation *operation , NSError *error ))failure</Declaration>
			<Parameters>
				<Parameter>
					<Name>success</Name>
					<Abstract type="html">The block to be executed on the completion of a successful request. This block has no return value and takes two arguments: the receiver operation and the object constructed from the response data of the request.</Abstract>
				</Parameter><Parameter>
					<Name>failure</Name>
					<Abstract type="html">The block to be executed on the completion of an unsuccessful request. This block has no return value and takes two arguments: the receiver operation and the error that occurred during the request.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/setCompletionBlockWithSuccess:failure:</Anchor>
		</Token>
		
	</File>
</Tokens>